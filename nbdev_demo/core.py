# AUTOGENERATED! DO NOT EDIT! File to edit: 01_core.ipynb (unless otherwise specified).

__all__ = ['HelloSayer', 'Scan']

# Cell
class HelloSayer:
    "Say hello to `to` using `say_hello`"
    def __init__(self, to): self.to = to

    def say(self):
        "Do the saying"
        return say_hello(self.to)

# Cell

class Scan:
    """Represents a medical imaging single 3D volume.

    Attributes:
        title: str represnting name of volume

        dcm_series: series of dcm files containing volume
    """

    def __init__(self, title, dcm_series):
        vol, pix_dim, affine = dicom_to_volume(dcm_series)
        self.title = title
        self.dcm_series = dcm_series
        self.vol = vol
        self.pix_dim = pix_dim
        self.affine = affine



    def getName(self):
        return self.__class__.__name__

    def write_nifti(self, output_path):
        """ **Writes a Nfiti file of 3D volume to a specified output path.**

        Args:
            output_path (_path_ or _str_): _Desired output path of Nifti file_

        Returns:
            _path_: _Path to which the Nifti file has been written_
        """

        nifti_file = nibabel.Nifti1Image(self.vol, self.affine)
        output_path = f"{output_path}/{self.title}.nii.gz"
        nibabel.save(nifti_file, output_path)

        return output_path

    def display_3D_volume(self, fig=False):

        if utils.is_notebook:
            pio.renderers.default = 'notebook_connected'

        img = self.vol
        fig = px.imshow(img, animation_frame=0, binary_string=True, labels=dict(animation_frame="slice"), title= "CT_SCAN",)
        fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 50



        if fig :
            return fig
        else:
            return fig.show()



    def __repr__(self):
        return f"Scan Object titled {self.title}, with dimensions {self.vol.shape}"